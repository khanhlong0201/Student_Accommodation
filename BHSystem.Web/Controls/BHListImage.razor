@using System.IO;
@using Microsoft.AspNetCore.Hosting;
@using Newtonsoft.Json
@*<BHLabel Value="Danh sách hình ảnh:"/>
<TelerikToolBar Class="border-bottom-0">
    <ToolBarButton IconClass="fa-solid fa-plus" OnClick="@(()=> OnAddLine())">Thêm dòng mới</ToolBarButton>
</TelerikToolBar>
<div class="bh-table-content" style=" height: calc(100vh - 250px);">
<TelerikGrid Data="@listSelect" @ref="@gridSelect"
                 Height="100%"
                 Width="100%"
                 RowHeight="25"
                 Pageable="true"
                 PageSize="50"
                 Sortable="true"
                 Resizable="true"
                 FilterMode="@GridFilterMode.FilterMenu"
                 SelectionMode="@GridSelectionMode.Multiple"
                 ScrollMode="@GridScrollMode.Scrollable"
                 >
        <GridSettings>
            <GridPagerSettings InputType="PagerInputType.Input" />
        </GridSettings>
        <GridAggregates>
            <GridAggregate Field=@nameof(ImagesDetailModel.File_Path) Aggregate="@GridAggregateType.Count" />
        </GridAggregates>
        <GridColumns>
            <GridCheckboxColumn Width="30px" SelectAll="@true"></GridCheckboxColumn>
            <GridColumn Field=@nameof(ImagesDetailModel.File_Path) Width="130px" MaxResizableWidth="150" Title="Đường dẫn file">
                <Template>
                    <div>
                         <BHUploadFileImage ImageUrl="@((context as ImagesDetailModel).File_Path)" Accept="image/*" 
                                    CssIcon="w1FileCss" SubFolder="Image" OnUploaded="@(e => setfileN   ame((context as ImagesDetailModel),e))"></BHUploadFileImage>
                    </div>
                </Template>
                <FooterTemplate>
                    Số dòng: @context.Count
                </FooterTemplate>
            </GridColumn>

        </GridColumns>
    </TelerikGrid>
</div>*@
<BHLabel Value="Danh sách hình ảnh:"/>
<div style="display:flex;justify-content:space-between; align-items: center;">
    <InputFile multiple OnChange="async(e) => await OnFileChanged(e)"  />
        <img src="../../images/upload.png" width="22" height="22" title = "@Text" alt="@Text"  style="cursor: pointer;"
            @onclick="async() => await uploadFile()" />
</div>
@if(listSelect != null && listSelect.Any())
{
<div style="display: flex; flex-direction: row; flex-wrap: wrap;">
    @foreach (var item in listSelect)
    {
        if(IsUploadFileCalled){
         <img src="../../images/delete-red.png" width="11" height="11" alt="Xóa hình"
                             title="xóa hình" class="btn_delete_grid" style="z-index: 1000;cursor: pointer;" @onclick="() => deleteImage(item)"/> 
        }
         <img class="img-thumbnail" src="@item.ImageUrl" style="width: 20%; height: 100%; object-fit: cover; border-radius: 3px;float: right" />
    }
</div>



}
@code {

    #region "Properties"
    [Inject] IWebHostEnvironment Environment { get; set; }
    [Inject] private ILoadingCore? _spinner { get; set; }


    List<ImagesDetailModel> listSelect = new List<ImagesDetailModel>();
    TelerikGrid<ImagesDetailModel> gridSelect = new  TelerikGrid<ImagesDetailModel>();

    [Parameter]
    public List<ImagesDetailModel> ListSelectReturn { 
        get => listSelect;
        set
        {
            if (listSelect != value) listSelect = value;
            
        }
    }
    [Parameter]
    public EventCallback <List<ImagesDetailModel>> ListSelectReturnChanged { get; set; }



    [Parameter]
    public List<IBrowserFile> ListBrowserFiles { get; set; } = new();   // Danh sách file lưu tạm => Upload file

    [Inject] IToastService toastService { get; set; }

    [Parameter]
    public string SubFolder { get; set; } = "";

    [Parameter]
    public string Text { get; set; } = "Upload";

    public string linkFileName { get; set; } = "";
    
    [Parameter]
    public bool IsUploadFileCalled  { get; set; } = false;
    #endregion "Properties"


    #region "Private Functions"

    private async Task showLoading(bool isShow = true)
    {
        if (isShow) { _spinner!.Show(); await Task.Yield(); }
        else _spinner!.Hide();
    }

    void setfileName(ImagesDetailModel item, string file)
    {
        item.File_Path = file;
    }

    //xóa trong thư mục
    async Task deleteImage(ImagesDetailModel item)
    {

        await Task.Delay(200); //
                               // Lấy đường dẫn thư mục gốc
        string rootPath = AppDomain.CurrentDomain.BaseDirectory;

        string stringDelete = rootPath.Replace("\\bin\\Debug\\net6.0", "");
        string fullPath = stringDelete + "wwwroot\\" + item.File_Path;

        if (File.Exists(fullPath))
        {
            // Xóa tệp
            File.Delete(fullPath);
            listSelect.Remove(item);
            ListSelectReturnChanged.InvokeAsync(listSelect);
        }
        await Task.Delay(200); 
        StateHasChanged();

    }

    async Task OnAddLine()
    {
        try
        {
            ImagesDetailModel imageDetail = new ImagesDetailModel { Id = 0, Image_Id = 0, File_Path = string.Empty };
            // Thêm đối tượng imageDetail rỗng vào danh sách


            listSelect.Add(imageDetail);
            gridSelect.Rebind();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            throw;
        }
    }
    long maxFileSize = 1024 * 1024 * 50;

    protected async Task OnFileChanged(InputFileChangeEventArgs eventArgs)
    {
        try
        {
            listSelect = new List<ImagesDetailModel>();
            ListBrowserFiles = new List<IBrowserFile>();
            ListBrowserFiles.AddRange(eventArgs.GetMultipleFiles().ToList());
            for (int i = 0; i < eventArgs.GetMultipleFiles().Count; i++)
            {
                using (MemoryStream ms = new())
                {
                    Stream imageStream = eventArgs.GetMultipleFiles()[i].OpenReadStream(maxFileSize);
                    ms.Position = 0;
                    //copy imageStream to Memory stream
                    await imageStream.CopyToAsync(ms);

                    ImagesDetailModel oImage = new ImagesDetailModel();
                    oImage.File_Name = eventArgs.GetMultipleFiles()[i].Name;
                    oImage.ImageUrl = $"data:image/png;base64,{Convert.ToBase64String(ms.ToArray())}";
                    //// Upload the image
                    //await uploadFile(oImage, eventArgs.GetMultipleFiles()[i]);
                    // oImage.File_Path = linkFileName;
                    // Add the image to the list
                    listSelect.Add(oImage);

                    // Flush and dispose of the MemoryStream
                    await ms.FlushAsync();
                    await ms.DisposeAsync();
                }
                ListSelectReturnChanged.InvokeAsync(listSelect);
            }
            IsUploadFileCalled = false;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            ListBrowserFiles.Clear();
            throw;
        } 
    }

    private async Task uploadFile()
    {
        try
        {
            if (IsUploadFileCalled)
            {
                // Hàm đã được gọi rồi, không cần gọi lại
                toastService.ShowWarning("Danh sách hình đã tồn tại!");
                return;
            }
            for (int i = 0; i < ListBrowserFiles.Count; i++)
            {
                await Task.Delay(200); //
                var RootFolder = Path.Combine(Environment.WebRootPath, "Upload", SubFolder);
                //tạo thư mục
                if (!System.IO.Directory.Exists(RootFolder))
                {
                    System.IO.Directory.CreateDirectory(RootFolder);
                }

                string strFileNameNewGuid = Guid.NewGuid() + "-" + ListBrowserFiles[0].Name;
                string FullFileName = Path.Combine(RootFolder, strFileNameNewGuid);
                Stream stream = ListBrowserFiles[i].OpenReadStream(maxFileSize);
                FileStream fs = File.Create(FullFileName);
                await stream.CopyToAsync(fs);
                fs.Close();

                await Task.Delay(200); 
                linkFileName = Path.Combine("Upload", SubFolder, strFileNameNewGuid);
                listSelect[i].File_Path = linkFileName;
            }
            toastService.ShowSuccess("Đã upload hình");
            IsUploadFileCalled = true;

        }
        catch (Exception ex)
        {
            ListBrowserFiles.Clear();
            throw;
        }
    }
    
     #endregion "Private Functions"
    
}

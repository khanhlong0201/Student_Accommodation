<CascadingValue Value="this">

    @*header cua tabpage*@
    <div class="@CssClass" style="height: 100%">
        <div class="card card-primary card-outline card-outline-tabs" style="margin-bottom:0px;height: 100%">
            <div class="card-header p-0 border-bottom-0" style="@(IsCollapse ? "position: relative;" : "")">

                <ul class="nav nav-tabs" role="tablist">
                    @*tao tab page*@
                    @foreach (W1TabNormalPage tabPage in Pages)
                    {
                        <li class="nav-item w1TabActive">
                           
                                <a class="nav-link @CssClass @tabPage.Disabled @GetButtonClass(tabPage)" style="cursor: pointer;"
                                @onclick=@(() => ActivatePage(tabPage))>@tabPage.Text</a>
                        </li>
                    }
               </ul>
               @if(IsCollapse)
               {
                    <div style="position: absolute; top: 8px; right: 10px; bottom: 0;">
                            <i class="@(IsShowIconCollapse? "fa fa-window-minimize" : "fa fa-window-maximize")" @onclick="@OnClickShowContent" 
                                title="@(IsShowIconCollapse? "Thu nhỏ" : "Phóng to")" style="color: #007BFE"></i>
                    </div>
               }
            </div>
            <div class="card-body" style="padding: 0.5rem 0.5rem !important; height: 100%" id="@IdScroll">
                @ChildContent
            </div>         
        </div>
        
    </div>
    
</CascadingValue>

@code {
    [Inject] ILoadingCore? spinner { get; set; } //longtran 20230131 
                                                //Noi dung tab pages
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter] public string IdScroll { get; set; } = ""; // hainguyen dung cho scroll khi bị tràng thông tin

    //Css cho button
    [Parameter]
    public string? CssClass { get; set; }

    //Css cho tab child - nếu có 
    [Parameter]
    public string CssClassActiveTabChild { get; set; } = "";

    //bien xoay 
    [Parameter]
    public bool IsSpinner { get; set; } = false;

    [Parameter]
    public string ListPageActive { get; set; } = "tabMachineStrucInfo";

    private string? _value;
    [Parameter]
    public string? Value
    {
        get => _value;
        set
        {
            if (value == _value)
            {
                return;
            }

            //Active tabpage thong qua name or text
            if(ActivePage != null && value != ActivePage.Name)
            {
                //Change page khi doi value
                var page = Pages.Where(x => x.Name == value).FirstOrDefault();
                if (page != null)
                {
                    ActivePage = page;
                }
            }

            //change value
            _value = value;
            if (ValueChanged.HasDelegate)
            {
                ValueChanged.InvokeAsync(_value);
            }
        }

    }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter] public bool IsCollapse {get;set;} = false; // cho collapse info
    [Parameter] public bool IsShowIconCollapse {get;set;} = true;
    [Parameter] public EventCallback OnClickShowContent {get;set;} // show hide content
    //
    //Lay noi dung cua tab page
    public W1TabNormalPage? ActivePage { get; set; }

    List<W1TabNormalPage> Pages = new List<W1TabNormalPage>();

     /// <summary>
    /// show loading
    /// </summary>
    /// <param name="isShow"></param>
    /// <returns></returns>
    async Task showSpinner(bool isShow = true)
    {
        try
        {
            if (isShow)
            {
                spinner?.Show();
                await Task.Delay(50);
            }
            else
            {
                await Task.Delay(100);
                spinner?.Hide();
            }

        }
        catch (Exception)
        {

            throw;
        }
    }

     /// <summary>
    /// set tab actibe
    /// </summary>
    /// <param name="tabName"></param>
    public void SetTabPageActive(string tabName){
        try {

             //Active tabpage thong qua name or text
            if(ActivePage != null && tabName != ActivePage.Name)
            {
                //Change page khi doi value
                var page = Pages.Where(x => x.Name == tabName).FirstOrDefault();
                if(page != null)
                {
                    ActivePage = page;
                }
            }

        }
        catch (Exception e)
        {
            throw e;
        }
    }

    //Add cac tabpage list
    internal void AddPage(W1TabNormalPage tabPage)
    {
        Pages.Add(tabPage);

        if (Pages.Count == 1)
        {
            ActivePage = tabPage;
        }

        StateHasChanged();
    }

    /// <summary>
    /// đổi pages khi đổi disdable
    /// </summary>
    /// <param name="tabPage"></param>
    internal void ChangePage(W1TabNormalPage tabPage)
    {
        StateHasChanged();
    }


    //thay doi css khi active
    string GetButtonClass(W1TabNormalPage page)
    {
        if (CssClassActiveTabChild!="")
        {
            return (page == ActivePage && page.Disabled == "") ? CssClassActiveTabChild : "";
        }else{
            return (page == ActivePage && page.Disabled == "") ? "w1Active" : "";
        }
    }
    
    //set noi dung khi active tabpage
    async void ActivatePage(W1TabNormalPage page)
    {
         if(IsSpinner)
         await showSpinner(); //bổ sung hàm xoay
        ActivePage = page;
        if (page != null)
        {
            Value = page.Name;
        }
         if(IsSpinner)
            await showSpinner(false);
    }

    protected override void OnAfterRender( bool firstRender)
    {
        if (firstRender)
        {
            //Set lai tab neu Value khac rong
            if(Value + "" != "" && Pages != null && Pages.Count > 0)
            {
                var page = Pages.Where(x => x.Name == Value).FirstOrDefault();
                if(page != null)
                {
                    ActivePage = page;
                    StateHasChanged();
                }
            }
        }
    }
}
<div class="form-control-wrapper noPaddingLR @ClassWidth @(IsInputGroup ? "input-group" :"w1Tooltip")" style="@(IsShowEye?"display: flex":"")">
    <input type="@Type" class="form-control w1textbox @(IsInValid?"is-invalid":"") @CssClass" id="@Id" placeholder="@PlaceHolder"
           maxlength="@MaxLenght" @bind="@Value" style="width:@Width;height:@Height;color: @ColorText"
           @onblur="@onBlur" @onfocus="@((FocusEventArgs args) =>  onFocus(args))"           
           @bind:event="oninput" @onchange="@((e)=> HandleOnChange(e, Value))"
           disabled="@IsDisable" title="@Title">
    @if (IsShowEye)
    {
        <i @onclick="@(() => HiddenPassword())" class="@(IsEye ? "far fa-eye fa": "fa fa-eye-slash")" id="togglePassword" style="margin-left: -30px;margin-top:7px; cursor: pointer;"></i>  
    }
    @if(IsInputGroup)
    {
        <div class="input-group-append w1textbox" style="width: calc(100% - @Width);height:@Height;">
            <span style="width: 100%;" class="input-group-text text-overflow w1textbox @CssClass" id="@Id">@ResponseString</span>
        </div>
    }
    @if (IsInValid)
    {
        <span class="w1Tooltip-top w1Tooltiptext">@ValidMes</span>
    }

</div>
<style>

    .text-overflow{
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    }
    .w1textbox {
        height: 30px;
    }

    /*SỬ DỤNG THẺ div BÊN NGOÀI*/
    .w1Tooltip {
        position: relative;
        display: inline-block;
        /*border-bottom: 1px dotted black;*/
        /*margin: auto;*/
        height: 30px;
        display: block;
    }
    

</style>


@code {
    [Parameter]
    public string ColorText{ get; set; } = "#495057";// show màu chữ 

    [Parameter]
    public bool IsShowEye{ get; set; } = false;// show mắt khi trên page nhập mật khẩu

    [Parameter]
    public bool IsInputGroup { get; set; } = false;// show phần input group

    [Parameter]
    public string? ResponseString { get; set; } // khi tim kiếm trả về kết quả => đi kèm với IsInputGroup

    [Parameter]
    public bool IsDisable { get; set; } = false;

    [Parameter]
    public int MaxLenght { get; set; } = 50;

    [Parameter]
    public string Type { get; set; } = "text";

    [Parameter]
    public string? CssClass { get; set; }

    [Parameter]
    public string? ClassWidth { get; set; }

    [Parameter]
    public string PlaceHolder { get; set; } = "";

    /// <summary>
    /// Dữ liệu nhập vào có thỏa điều kiện không? = true là sai
    /// </summary>
    [Parameter]
    public bool IsInValid { get; set; } = false;

    /// <summary>
    /// thông báo khi dữ liệu không thỏa điều kiện
    /// </summary>
    [Parameter]
    public string ValidMes { get; set; } = "";

    [Parameter]
    public string? Id { get; set; }

    [Parameter]
    public string? ValueOld { get; set; }

    /// <summary>
    /// lúc nào mất focus cũng raise lên
    /// </summary>
    [Parameter]
    public bool IsAllwaysBlur { get; set; } = true;

    [Parameter]
    public bool IsEnterToBlur { get; set; } = true;

    private string? _value;
    [Parameter]
    public string? Value
    {
        get => _value;
        set
        {
            if (value == _value)
                return;

            _value = value;
            if (ValueChanged.HasDelegate)
            {
                ValueChanged.InvokeAsync(_value);
            }
        }

    }

    [Parameter]
    public string Title { get; set; } = "";

    [Parameter]
    public string Width { get; set; } = "";
    [Parameter]
    public string Height { get; set; } = "";

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public EventCallback<string> OnBlur { get; set; }

    [Parameter]
    public EventCallback<string> OnFocus { get; set; }

    [Parameter]
    public EventCallback<string> OnChange { get; set; }

    public bool IsEye { get; set; } = false; //biến hiển thị 

    private async Task onBlur(FocusEventArgs e)
    {
        if (IsAllwaysBlur)
        {
            await OnBlur.InvokeAsync(_value);
        }
        else
        {// khi giá trị mới khác giá trị cũ mới raise lên
            if (ValueOld != _value) await OnBlur.InvokeAsync(_value);
        }
    }

    private async Task onFocus(FocusEventArgs e)
    {
        ValueOld = _value;
        await OnFocus.InvokeAsync(_value);
        await Task.CompletedTask;

    }

    protected void HiddenPassword()
    {
        IsEye = !IsEye;
        if (Type == "Text")
        {
            Type = "password";
            //IsEye = false;
        }
        else
        {
            Type = "Text";
            //IsEye = true;
        }    
        StateHasChanged();
      }

    private async Task HandleOnChange(ChangeEventArgs e, string? value) => await OnChange.InvokeAsync(value);

    

}